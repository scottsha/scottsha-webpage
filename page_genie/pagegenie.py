#!/usr/bin/env python
# File generated by reverse AIRIUM translator (version 0.2.1).
# Any change will be overridden on next run.
# flake8: noqa E501 (line too long)

from airium import Airium
import pandas as pd

def conjure_head():
    a = Airium()
    with a.head():
        a.meta(charset='utf-8')
        a.meta(content='width=device-width, initial-scale=1.0', name='viewport')
        a.title(_t='Shane Scott')
        a.link(href='css/foundation.css', rel='stylesheet')
        a.script(src='../js/vendor/modernizr.js')
        a.link(href='tenta.ico', rel='shortcut icon')
        return a

def wrap_nav_on_body(an_arium = Airium()):
    a = Airium()
    with a.body():
        a('<!-- Navigation Bar! -->')
        with a.nav(klass='top-bar', **{'data-topbar': ''}):
            with a.ul(klass='title-area'):
                with a.li(klass='name'):
                    with a.h1():
                        a.a(href='index.html', _t='Shane Scott')
                with a.li(klass='toggle-topbar menu-icon'):
                    with a.a(href='#'):
                        a.span(_t='Menu')
            with a.section(klass='top-bar-section'):
                a('<!-- Left Nav Section -->')
                with a.ul(klass='left'):
                    with a.li():
                        a.a(href='cv_shane_scott.pdf', _t='CV')
                with a.ul(klass='left'):
                    with a.li():
                        a.a(href='researchings.html', _t='Research')
                with a.ul(klass='left'):
                    with a.li():
                        a.a(href='teachings.html', _t='Teaching')
                with a.ul(klass='left'):
                    with a.li():
                        a.a(href='mathings.html', _t='Math!')
        a('<!-- End Navigation Bar! -->')
        a('<!-- Body Content -->')
        a(an_arium)
    return a

def conjure_bottom():
    a = Airium()
    a.script(src='../js/vendor/jquery.js')
    a.script(src='../js/foundation.min.js')
    with a.script():
        a('$(document).foundation();')
    return a

class Genie:
    def __init__(self):
        self.tome = pd.read_csv("tome.csv")

    def conjure_sqbutton(self, row_ii, col_size):
        a = Airium()
        row = self.tome.loc[row_ii]
        with a.div(klass='small-'+str(col_size)+' small columns'):
            with a.div(klass='content'):
                with a.a(href=row['link']):
                    a.img(src=row['icon'], style='width:100%')
                with a.p():
                    with a.center():
                        with a.a(klass='medium button', href=row['link'],
                                 style='width:100%'):
                            a(row['title'])
        return a

    def conjure_contents(self):
        gridshape = 2
        a = Airium()
        # with a.div(klass='small-11 small-centered columns'):
        with a.p():
            ii=0
            rowcnt = self.tome.shape[0]
            while (ii < rowcnt):
                with a.div(klass='row'):
                    for foo in range(gridshape):
                        a(self.conjure_sqbutton(ii, 12//gridshape))
                        ii = ii + 1
                        if (ii == rowcnt):
                            break
                    # a.div(klass='small-1 column')
                    # a(self.conjure_sqbutton(ii))
                    # ii = ii + 1
        return a

    def conjure_tome_all(self):
        a = Airium()
        a('<!DOCTYPE html>')
        head = conjure_head()
        a(head)
        bod_con = self.conjure_contents()
        bod = wrap_nav_on_body(bod_con)
        a(bod)
        bot = conjure_bottom()
        a(bot)
        return a


if __name__ == "__main__":
    genie = Genie()
    a = genie.conjure_tome_all()
    with open("../testgenie.html", "w") as f:
        f.write(str(a))

